// source: grpc/testing/messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grpc.testing.BoolValue', null, global);
goog.exportSymbol('proto.grpc.testing.EchoStatus', null, global);
goog.exportSymbol('proto.grpc.testing.Payload', null, global);
goog.exportSymbol('proto.grpc.testing.PayloadType', null, global);
goog.exportSymbol('proto.grpc.testing.ReconnectInfo', null, global);
goog.exportSymbol('proto.grpc.testing.ReconnectParams', null, global);
goog.exportSymbol('proto.grpc.testing.ResponseParameters', null, global);
goog.exportSymbol('proto.grpc.testing.SimpleRequest', null, global);
goog.exportSymbol('proto.grpc.testing.SimpleResponse', null, global);
goog.exportSymbol('proto.grpc.testing.StreamingInputCallRequest', null, global);
goog.exportSymbol('proto.grpc.testing.StreamingInputCallResponse', null, global);
goog.exportSymbol('proto.grpc.testing.StreamingOutputCallRequest', null, global);
goog.exportSymbol('proto.grpc.testing.StreamingOutputCallResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.BoolValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.BoolValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.BoolValue.displayName = 'proto.grpc.testing.BoolValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.Payload.displayName = 'proto.grpc.testing.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.EchoStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.EchoStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.EchoStatus.displayName = 'proto.grpc.testing.EchoStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.SimpleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.SimpleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.SimpleRequest.displayName = 'proto.grpc.testing.SimpleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.SimpleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.SimpleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.SimpleResponse.displayName = 'proto.grpc.testing.SimpleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.StreamingInputCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.StreamingInputCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.StreamingInputCallRequest.displayName = 'proto.grpc.testing.StreamingInputCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.StreamingInputCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.StreamingInputCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.StreamingInputCallResponse.displayName = 'proto.grpc.testing.StreamingInputCallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ResponseParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ResponseParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.ResponseParameters.displayName = 'proto.grpc.testing.ResponseParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.StreamingOutputCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.StreamingOutputCallRequest.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.StreamingOutputCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.StreamingOutputCallRequest.displayName = 'proto.grpc.testing.StreamingOutputCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.StreamingOutputCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.StreamingOutputCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.StreamingOutputCallResponse.displayName = 'proto.grpc.testing.StreamingOutputCallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ReconnectParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ReconnectParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.ReconnectParams.displayName = 'proto.grpc.testing.ReconnectParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ReconnectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.ReconnectInfo.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.ReconnectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.testing.ReconnectInfo.displayName = 'proto.grpc.testing.ReconnectInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.BoolValue.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.BoolValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.BoolValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.BoolValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.BoolValue}
 */
proto.grpc.testing.BoolValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.BoolValue;
  return proto.grpc.testing.BoolValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.BoolValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.BoolValue}
 */
proto.grpc.testing.BoolValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.BoolValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.BoolValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.BoolValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.BoolValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool value = 1;
 * @return {boolean}
 */
proto.grpc.testing.BoolValue.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.grpc.testing.BoolValue} returns this
 */
proto.grpc.testing.BoolValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Payload}
 */
proto.grpc.testing.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Payload;
  return proto.grpc.testing.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Payload}
 */
proto.grpc.testing.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grpc.testing.PayloadType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional PayloadType type = 1;
 * @return {!proto.grpc.testing.PayloadType}
 */
proto.grpc.testing.Payload.prototype.getType = function() {
  return /** @type {!proto.grpc.testing.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.grpc.testing.PayloadType} value
 * @return {!proto.grpc.testing.Payload} returns this
 */
proto.grpc.testing.Payload.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {string}
 */
proto.grpc.testing.Payload.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.grpc.testing.Payload.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.grpc.testing.Payload.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.grpc.testing.Payload} returns this
 */
proto.grpc.testing.Payload.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.EchoStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.EchoStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.EchoStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.EchoStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.EchoStatus}
 */
proto.grpc.testing.EchoStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.EchoStatus;
  return proto.grpc.testing.EchoStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.EchoStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.EchoStatus}
 */
proto.grpc.testing.EchoStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.EchoStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.EchoStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.EchoStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.EchoStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.grpc.testing.EchoStatus.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.EchoStatus} returns this
 */
proto.grpc.testing.EchoStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.grpc.testing.EchoStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.EchoStatus} returns this
 */
proto.grpc.testing.EchoStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.SimpleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.SimpleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.SimpleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.SimpleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    responseSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payload: (f = msg.getPayload()) && proto.grpc.testing.Payload.toObject(includeInstance, f),
    fillUsername: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    fillOauthScope: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    responseCompressed: (f = msg.getResponseCompressed()) && proto.grpc.testing.BoolValue.toObject(includeInstance, f),
    responseStatus: (f = msg.getResponseStatus()) && proto.grpc.testing.EchoStatus.toObject(includeInstance, f),
    expectCompressed: (f = msg.getExpectCompressed()) && proto.grpc.testing.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.SimpleRequest}
 */
proto.grpc.testing.SimpleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.SimpleRequest;
  return proto.grpc.testing.SimpleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.SimpleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.SimpleRequest}
 */
proto.grpc.testing.SimpleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grpc.testing.PayloadType} */ (reader.readEnum());
      msg.setResponseType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseSize(value);
      break;
    case 3:
      var value = new proto.grpc.testing.Payload;
      reader.readMessage(value,proto.grpc.testing.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFillUsername(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFillOauthScope(value);
      break;
    case 6:
      var value = new proto.grpc.testing.BoolValue;
      reader.readMessage(value,proto.grpc.testing.BoolValue.deserializeBinaryFromReader);
      msg.setResponseCompressed(value);
      break;
    case 7:
      var value = new proto.grpc.testing.EchoStatus;
      reader.readMessage(value,proto.grpc.testing.EchoStatus.deserializeBinaryFromReader);
      msg.setResponseStatus(value);
      break;
    case 8:
      var value = new proto.grpc.testing.BoolValue;
      reader.readMessage(value,proto.grpc.testing.BoolValue.deserializeBinaryFromReader);
      msg.setExpectCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.SimpleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.SimpleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.SimpleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.SimpleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResponseSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.testing.Payload.serializeBinaryToWriter
    );
  }
  f = message.getFillUsername();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFillOauthScope();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getResponseCompressed();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.grpc.testing.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getResponseStatus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.grpc.testing.EchoStatus.serializeBinaryToWriter
    );
  }
  f = message.getExpectCompressed();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.grpc.testing.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional PayloadType response_type = 1;
 * @return {!proto.grpc.testing.PayloadType}
 */
proto.grpc.testing.SimpleRequest.prototype.getResponseType = function() {
  return /** @type {!proto.grpc.testing.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.grpc.testing.PayloadType} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.setResponseType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 response_size = 2;
 * @return {number}
 */
proto.grpc.testing.SimpleRequest.prototype.getResponseSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.setResponseSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Payload payload = 3;
 * @return {?proto.grpc.testing.Payload}
 */
proto.grpc.testing.SimpleRequest.prototype.getPayload = function() {
  return /** @type{?proto.grpc.testing.Payload} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Payload, 3));
};


/**
 * @param {?proto.grpc.testing.Payload|undefined} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
*/
proto.grpc.testing.SimpleRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.SimpleRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool fill_username = 4;
 * @return {boolean}
 */
proto.grpc.testing.SimpleRequest.prototype.getFillUsername = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.setFillUsername = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool fill_oauth_scope = 5;
 * @return {boolean}
 */
proto.grpc.testing.SimpleRequest.prototype.getFillOauthScope = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.setFillOauthScope = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional BoolValue response_compressed = 6;
 * @return {?proto.grpc.testing.BoolValue}
 */
proto.grpc.testing.SimpleRequest.prototype.getResponseCompressed = function() {
  return /** @type{?proto.grpc.testing.BoolValue} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.BoolValue, 6));
};


/**
 * @param {?proto.grpc.testing.BoolValue|undefined} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
*/
proto.grpc.testing.SimpleRequest.prototype.setResponseCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.clearResponseCompressed = function() {
  return this.setResponseCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.SimpleRequest.prototype.hasResponseCompressed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EchoStatus response_status = 7;
 * @return {?proto.grpc.testing.EchoStatus}
 */
proto.grpc.testing.SimpleRequest.prototype.getResponseStatus = function() {
  return /** @type{?proto.grpc.testing.EchoStatus} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.EchoStatus, 7));
};


/**
 * @param {?proto.grpc.testing.EchoStatus|undefined} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
*/
proto.grpc.testing.SimpleRequest.prototype.setResponseStatus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.clearResponseStatus = function() {
  return this.setResponseStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.SimpleRequest.prototype.hasResponseStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BoolValue expect_compressed = 8;
 * @return {?proto.grpc.testing.BoolValue}
 */
proto.grpc.testing.SimpleRequest.prototype.getExpectCompressed = function() {
  return /** @type{?proto.grpc.testing.BoolValue} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.BoolValue, 8));
};


/**
 * @param {?proto.grpc.testing.BoolValue|undefined} value
 * @return {!proto.grpc.testing.SimpleRequest} returns this
*/
proto.grpc.testing.SimpleRequest.prototype.setExpectCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.SimpleRequest} returns this
 */
proto.grpc.testing.SimpleRequest.prototype.clearExpectCompressed = function() {
  return this.setExpectCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.SimpleRequest.prototype.hasExpectCompressed = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.SimpleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.SimpleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.SimpleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.SimpleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.grpc.testing.Payload.toObject(includeInstance, f),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oauthScope: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.SimpleResponse}
 */
proto.grpc.testing.SimpleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.SimpleResponse;
  return proto.grpc.testing.SimpleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.SimpleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.SimpleResponse}
 */
proto.grpc.testing.SimpleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.Payload;
      reader.readMessage(value,proto.grpc.testing.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.SimpleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.SimpleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.SimpleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.SimpleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.Payload.serializeBinaryToWriter
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOauthScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.grpc.testing.Payload}
 */
proto.grpc.testing.SimpleResponse.prototype.getPayload = function() {
  return /** @type{?proto.grpc.testing.Payload} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Payload, 1));
};


/**
 * @param {?proto.grpc.testing.Payload|undefined} value
 * @return {!proto.grpc.testing.SimpleResponse} returns this
*/
proto.grpc.testing.SimpleResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.SimpleResponse} returns this
 */
proto.grpc.testing.SimpleResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.SimpleResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.grpc.testing.SimpleResponse.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.SimpleResponse} returns this
 */
proto.grpc.testing.SimpleResponse.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string oauth_scope = 3;
 * @return {string}
 */
proto.grpc.testing.SimpleResponse.prototype.getOauthScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.testing.SimpleResponse} returns this
 */
proto.grpc.testing.SimpleResponse.prototype.setOauthScope = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.StreamingInputCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.StreamingInputCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingInputCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.grpc.testing.Payload.toObject(includeInstance, f),
    expectCompressed: (f = msg.getExpectCompressed()) && proto.grpc.testing.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.StreamingInputCallRequest}
 */
proto.grpc.testing.StreamingInputCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.StreamingInputCallRequest;
  return proto.grpc.testing.StreamingInputCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.StreamingInputCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.StreamingInputCallRequest}
 */
proto.grpc.testing.StreamingInputCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.Payload;
      reader.readMessage(value,proto.grpc.testing.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.grpc.testing.BoolValue;
      reader.readMessage(value,proto.grpc.testing.BoolValue.deserializeBinaryFromReader);
      msg.setExpectCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.StreamingInputCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.StreamingInputCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingInputCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.Payload.serializeBinaryToWriter
    );
  }
  f = message.getExpectCompressed();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.grpc.testing.Payload}
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.getPayload = function() {
  return /** @type{?proto.grpc.testing.Payload} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Payload, 1));
};


/**
 * @param {?proto.grpc.testing.Payload|undefined} value
 * @return {!proto.grpc.testing.StreamingInputCallRequest} returns this
*/
proto.grpc.testing.StreamingInputCallRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.StreamingInputCallRequest} returns this
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BoolValue expect_compressed = 2;
 * @return {?proto.grpc.testing.BoolValue}
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.getExpectCompressed = function() {
  return /** @type{?proto.grpc.testing.BoolValue} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.BoolValue, 2));
};


/**
 * @param {?proto.grpc.testing.BoolValue|undefined} value
 * @return {!proto.grpc.testing.StreamingInputCallRequest} returns this
*/
proto.grpc.testing.StreamingInputCallRequest.prototype.setExpectCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.StreamingInputCallRequest} returns this
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.clearExpectCompressed = function() {
  return this.setExpectCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.StreamingInputCallRequest.prototype.hasExpectCompressed = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.StreamingInputCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.StreamingInputCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.StreamingInputCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingInputCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aggregatedPayloadSize: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.StreamingInputCallResponse}
 */
proto.grpc.testing.StreamingInputCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.StreamingInputCallResponse;
  return proto.grpc.testing.StreamingInputCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.StreamingInputCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.StreamingInputCallResponse}
 */
proto.grpc.testing.StreamingInputCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAggregatedPayloadSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.StreamingInputCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.StreamingInputCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.StreamingInputCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingInputCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAggregatedPayloadSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 aggregated_payload_size = 1;
 * @return {number}
 */
proto.grpc.testing.StreamingInputCallResponse.prototype.getAggregatedPayloadSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.StreamingInputCallResponse} returns this
 */
proto.grpc.testing.StreamingInputCallResponse.prototype.setAggregatedPayloadSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ResponseParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ResponseParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ResponseParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.ResponseParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    intervalUs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    compressed: (f = msg.getCompressed()) && proto.grpc.testing.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ResponseParameters}
 */
proto.grpc.testing.ResponseParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ResponseParameters;
  return proto.grpc.testing.ResponseParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ResponseParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ResponseParameters}
 */
proto.grpc.testing.ResponseParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntervalUs(value);
      break;
    case 3:
      var value = new proto.grpc.testing.BoolValue;
      reader.readMessage(value,proto.grpc.testing.BoolValue.deserializeBinaryFromReader);
      msg.setCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ResponseParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ResponseParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ResponseParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.ResponseParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIntervalUs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCompressed();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.testing.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 size = 1;
 * @return {number}
 */
proto.grpc.testing.ResponseParameters.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.ResponseParameters} returns this
 */
proto.grpc.testing.ResponseParameters.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 interval_us = 2;
 * @return {number}
 */
proto.grpc.testing.ResponseParameters.prototype.getIntervalUs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.ResponseParameters} returns this
 */
proto.grpc.testing.ResponseParameters.prototype.setIntervalUs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional BoolValue compressed = 3;
 * @return {?proto.grpc.testing.BoolValue}
 */
proto.grpc.testing.ResponseParameters.prototype.getCompressed = function() {
  return /** @type{?proto.grpc.testing.BoolValue} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.BoolValue, 3));
};


/**
 * @param {?proto.grpc.testing.BoolValue|undefined} value
 * @return {!proto.grpc.testing.ResponseParameters} returns this
*/
proto.grpc.testing.ResponseParameters.prototype.setCompressed = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.ResponseParameters} returns this
 */
proto.grpc.testing.ResponseParameters.prototype.clearCompressed = function() {
  return this.setCompressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.ResponseParameters.prototype.hasCompressed = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.StreamingOutputCallRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.StreamingOutputCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.StreamingOutputCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingOutputCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    responseParametersList: jspb.Message.toObjectList(msg.getResponseParametersList(),
    proto.grpc.testing.ResponseParameters.toObject, includeInstance),
    payload: (f = msg.getPayload()) && proto.grpc.testing.Payload.toObject(includeInstance, f),
    responseStatus: (f = msg.getResponseStatus()) && proto.grpc.testing.EchoStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.StreamingOutputCallRequest}
 */
proto.grpc.testing.StreamingOutputCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.StreamingOutputCallRequest;
  return proto.grpc.testing.StreamingOutputCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.StreamingOutputCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.StreamingOutputCallRequest}
 */
proto.grpc.testing.StreamingOutputCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grpc.testing.PayloadType} */ (reader.readEnum());
      msg.setResponseType(value);
      break;
    case 2:
      var value = new proto.grpc.testing.ResponseParameters;
      reader.readMessage(value,proto.grpc.testing.ResponseParameters.deserializeBinaryFromReader);
      msg.addResponseParameters(value);
      break;
    case 3:
      var value = new proto.grpc.testing.Payload;
      reader.readMessage(value,proto.grpc.testing.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 7:
      var value = new proto.grpc.testing.EchoStatus;
      reader.readMessage(value,proto.grpc.testing.EchoStatus.deserializeBinaryFromReader);
      msg.setResponseStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.StreamingOutputCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.StreamingOutputCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingOutputCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResponseParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.grpc.testing.ResponseParameters.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.testing.Payload.serializeBinaryToWriter
    );
  }
  f = message.getResponseStatus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.grpc.testing.EchoStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional PayloadType response_type = 1;
 * @return {!proto.grpc.testing.PayloadType}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.getResponseType = function() {
  return /** @type {!proto.grpc.testing.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.grpc.testing.PayloadType} value
 * @return {!proto.grpc.testing.StreamingOutputCallRequest} returns this
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.setResponseType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ResponseParameters response_parameters = 2;
 * @return {!Array<!proto.grpc.testing.ResponseParameters>}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.getResponseParametersList = function() {
  return /** @type{!Array<!proto.grpc.testing.ResponseParameters>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.testing.ResponseParameters, 2));
};


/**
 * @param {!Array<!proto.grpc.testing.ResponseParameters>} value
 * @return {!proto.grpc.testing.StreamingOutputCallRequest} returns this
*/
proto.grpc.testing.StreamingOutputCallRequest.prototype.setResponseParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.grpc.testing.ResponseParameters=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.ResponseParameters}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.addResponseParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.grpc.testing.ResponseParameters, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.testing.StreamingOutputCallRequest} returns this
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.clearResponseParametersList = function() {
  return this.setResponseParametersList([]);
};


/**
 * optional Payload payload = 3;
 * @return {?proto.grpc.testing.Payload}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.getPayload = function() {
  return /** @type{?proto.grpc.testing.Payload} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Payload, 3));
};


/**
 * @param {?proto.grpc.testing.Payload|undefined} value
 * @return {!proto.grpc.testing.StreamingOutputCallRequest} returns this
*/
proto.grpc.testing.StreamingOutputCallRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.StreamingOutputCallRequest} returns this
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EchoStatus response_status = 7;
 * @return {?proto.grpc.testing.EchoStatus}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.getResponseStatus = function() {
  return /** @type{?proto.grpc.testing.EchoStatus} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.EchoStatus, 7));
};


/**
 * @param {?proto.grpc.testing.EchoStatus|undefined} value
 * @return {!proto.grpc.testing.StreamingOutputCallRequest} returns this
*/
proto.grpc.testing.StreamingOutputCallRequest.prototype.setResponseStatus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.StreamingOutputCallRequest} returns this
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.clearResponseStatus = function() {
  return this.setResponseStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.StreamingOutputCallRequest.prototype.hasResponseStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.StreamingOutputCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.StreamingOutputCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.StreamingOutputCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingOutputCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.grpc.testing.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.StreamingOutputCallResponse}
 */
proto.grpc.testing.StreamingOutputCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.StreamingOutputCallResponse;
  return proto.grpc.testing.StreamingOutputCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.StreamingOutputCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.StreamingOutputCallResponse}
 */
proto.grpc.testing.StreamingOutputCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.Payload;
      reader.readMessage(value,proto.grpc.testing.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.StreamingOutputCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.StreamingOutputCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.StreamingOutputCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.StreamingOutputCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.grpc.testing.Payload}
 */
proto.grpc.testing.StreamingOutputCallResponse.prototype.getPayload = function() {
  return /** @type{?proto.grpc.testing.Payload} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Payload, 1));
};


/**
 * @param {?proto.grpc.testing.Payload|undefined} value
 * @return {!proto.grpc.testing.StreamingOutputCallResponse} returns this
*/
proto.grpc.testing.StreamingOutputCallResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.testing.StreamingOutputCallResponse} returns this
 */
proto.grpc.testing.StreamingOutputCallResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.testing.StreamingOutputCallResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ReconnectParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ReconnectParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ReconnectParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.ReconnectParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxReconnectBackoffMs: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ReconnectParams}
 */
proto.grpc.testing.ReconnectParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ReconnectParams;
  return proto.grpc.testing.ReconnectParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ReconnectParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ReconnectParams}
 */
proto.grpc.testing.ReconnectParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxReconnectBackoffMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ReconnectParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ReconnectParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ReconnectParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.ReconnectParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxReconnectBackoffMs();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 max_reconnect_backoff_ms = 1;
 * @return {number}
 */
proto.grpc.testing.ReconnectParams.prototype.getMaxReconnectBackoffMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.testing.ReconnectParams} returns this
 */
proto.grpc.testing.ReconnectParams.prototype.setMaxReconnectBackoffMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.ReconnectInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ReconnectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ReconnectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ReconnectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.ReconnectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    passed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    backoffMsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ReconnectInfo}
 */
proto.grpc.testing.ReconnectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ReconnectInfo;
  return proto.grpc.testing.ReconnectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ReconnectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ReconnectInfo}
 */
proto.grpc.testing.ReconnectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassed(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setBackoffMsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ReconnectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ReconnectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ReconnectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.testing.ReconnectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBackoffMsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional bool passed = 1;
 * @return {boolean}
 */
proto.grpc.testing.ReconnectInfo.prototype.getPassed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.grpc.testing.ReconnectInfo} returns this
 */
proto.grpc.testing.ReconnectInfo.prototype.setPassed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated int32 backoff_ms = 2;
 * @return {!Array<number>}
 */
proto.grpc.testing.ReconnectInfo.prototype.getBackoffMsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.grpc.testing.ReconnectInfo} returns this
 */
proto.grpc.testing.ReconnectInfo.prototype.setBackoffMsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.ReconnectInfo} returns this
 */
proto.grpc.testing.ReconnectInfo.prototype.addBackoffMs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.testing.ReconnectInfo} returns this
 */
proto.grpc.testing.ReconnectInfo.prototype.clearBackoffMsList = function() {
  return this.setBackoffMsList([]);
};


/**
 * @enum {number}
 */
proto.grpc.testing.PayloadType = {
  COMPRESSABLE: 0
};

goog.object.extend(exports, proto.grpc.testing);
