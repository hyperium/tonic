name: CI

on:
  push:
    branches: [ "master" ]
  pull_request: {}
  merge_group:
    branches: [ "master" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:

  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
      with:
        components: rustfmt
    - run: cargo fmt --all --check

  build-protoc-plugin:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    outputs:
      cache-hit: ${{ steps.cache-plugin.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache protoc plugin
        id: cache-plugin
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/protoc-plugin
          # The key changes only when plugin source files change
          key: ${{ runner.os }}-protoc-plugin-${{ hashFiles('protoc-gen-rust-grpc/src/**', 'protoc-gen-rust-grpc/.bazelrc', 'protoc-gen-rust-grpc/MODULE.bazel') }}
      - name: Install Bazel
        if: steps.cache-plugin.outputs.cache-hit != 'true'
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true
          module-root: ./protoc-gen-rust-grpc
      # Building the protoc plugin from scratch takes 6â€“14 minutes, depending on
      # the OS. This delays the execution of workflows that use the plugin in
      # build.rs files. We try to avoid rebuilding the plugin if it hasn't
      # changed.
      - name: Build protoc plugin
        if: steps.cache-plugin.outputs.cache-hit != 'true'
        working-directory: ./protoc-gen-rust-grpc
        shell: bash
        run: |
          set -e
          # On windows, the "//src" gets converted to "/". Disable this path
          # conversion.
          export MSYS_NO_PATHCONV=1
          export MSYS2_ARG_CONV_EXCL="*"

          bazel build //src:protoc-gen-rust-grpc --enable_platform_specific_config

          # The target path needs to match the cache config.
          TARGET_PATH="${{ runner.temp }}/protoc-plugin"
          mkdir -p "${TARGET_PATH}"
          cp bazel-bin/src/protoc-gen-rust-grpc "${TARGET_PATH}"

  clippy:
    runs-on: ubuntu-latest
    needs: build-protoc-plugin
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
      with:
        components: clippy
    - uses: taiki-e/install-action@v2
      with:
        tool: protoc@3.31.1
    - name: Restore protoc plugin from cache
      id: cache-plugin
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/protoc-plugin
        key: ${{ runner.os }}-protoc-plugin-${{ hashFiles('protoc-gen-rust-grpc/src/**', 'protoc-gen-rust-grpc/.bazelrc', 'protoc-gen-rust-grpc/MODULE.bazel') }}
    - name: Add protoc plugin to PATH
      shell: bash
      run: |
        echo "${{ runner.temp }}/protoc-plugin" >> $GITHUB_PATH
    - uses: Swatinem/rust-cache@v2
    - run: cargo clippy --workspace --all-features --all-targets

  codegen:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
    - uses: Swatinem/rust-cache@v2
    - run: cargo run --package codegen
    - run: git diff --exit-code

  udeps:
    runs-on: ubuntu-latest
    needs: build-protoc-plugin
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2025-03-27
    - uses: taiki-e/install-action@cargo-hack
    - uses: taiki-e/install-action@cargo-udeps
    - uses: taiki-e/install-action@v2
      with:
        tool: protoc@3.31.1
    - name: Restore protoc plugin from cache
      id: cache-plugin
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/protoc-plugin
        key: ${{ runner.os }}-protoc-plugin-${{ hashFiles('protoc-gen-rust-grpc/src/**', 'protoc-gen-rust-grpc/.bazelrc', 'protoc-gen-rust-grpc/MODULE.bazel') }}
    - name: Add protoc plugin to PATH
      shell: bash
      run: |
        echo "${{ runner.temp }}/protoc-plugin" >> $GITHUB_PATH
    - uses: Swatinem/rust-cache@v2
    - run: cargo hack udeps --workspace --exclude-features=_tls-any,tls,tls-aws-lc,tls-ring --each-feature
    - run: cargo udeps --package tonic --features tls-ring,transport
    - run: cargo udeps --package tonic --features tls-ring,server
    - run: cargo udeps --package tonic --features tls-ring,channel
    - run: cargo udeps --package tonic --features tls-aws-lc,transport
    - run: cargo udeps --package tonic --features tls-aws-lc,server
    - run: cargo udeps --package tonic --features tls-aws-lc,channel

  check:
    runs-on: ${{ matrix.os }}
    needs: build-protoc-plugin
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    env:
      RUSTFLAGS: "-D warnings"
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
    - uses: taiki-e/install-action@cargo-hack
    - uses: taiki-e/install-action@v2
      with:
        tool: protoc@3.31.1
    - name: Restore protoc plugin from cache
      id: cache-plugin
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/protoc-plugin
        key: ${{ runner.os }}-protoc-plugin-${{ hashFiles('protoc-gen-rust-grpc/src/**', 'protoc-gen-rust-grpc/.bazelrc', 'protoc-gen-rust-grpc/MODULE.bazel') }}
    - name: Add protoc plugin to PATH
      shell: bash
      run: |
        echo "${{ runner.temp }}/protoc-plugin" >> $GITHUB_PATH
    - uses: Swatinem/rust-cache@v2
    - name: Check features
      run: cargo hack check --workspace --no-private --each-feature --no-dev-deps
    - name: Check tonic feature powerset
      run: cargo hack check --package tonic --feature-powerset --depth 2
    - name: Check all targets
      run: cargo check --workspace --all-targets --all-features

  msrv:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
    - name: Resolve MSRV aware dependencies
      run: cargo update
      env:
        CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS: fallback
    - name: Get MSRV from manifest file
      id: msrv
      run: echo "version=$(yq '.workspace.package.rust-version' Cargo.toml)" >> "$GITHUB_OUTPUT"
    - uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ steps.msrv.outputs.version }}
    - uses: taiki-e/install-action@cargo-no-dev-deps
    - uses: Swatinem/rust-cache@v2
    # we exlude crates that do not use rust-version = { workspace = true }
    - run: cargo no-dev-deps --no-private check --all-features --workspace --exclude grpc --exclude tonic-protobuf\*
    - run: cargo no-dev-deps --no-private doc --no-deps --all-features --workspace --exclude grpc --exclude tonic-protobuf\*
      env:
        RUSTDOCFLAGS: "-D warnings"

  test:
    runs-on: ${{ matrix.os }}
    needs: build-protoc-plugin
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
    - uses: taiki-e/install-action@v2
      with:
        tool: protoc@3.31.1
    - name: Restore protoc plugin from cache
      id: cache-plugin
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/protoc-plugin
        key: ${{ runner.os }}-protoc-plugin-${{ hashFiles('protoc-gen-rust-grpc/src/**', 'protoc-gen-rust-grpc/.bazelrc', 'protoc-gen-rust-grpc/MODULE.bazel') }}
    - name: Add protoc plugin to PATH
      shell: bash
      run: |
        echo "${{ runner.temp }}/protoc-plugin" >> $GITHUB_PATH
    - uses: taiki-e/install-action@cargo-hack
    - uses: taiki-e/install-action@cargo-nextest
    - uses: Swatinem/rust-cache@v2
    - run: cargo nextest run --workspace --all-features
      env:
        QUICKCHECK_TESTS: 1000  # run a lot of quickcheck iterations

  doc-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
    - uses: taiki-e/install-action@cargo-hack
    - uses: Swatinem/rust-cache@v2
    - run: cargo hack --no-private test --doc --all-features

  interop:
    name: Interop Tests
    runs-on: ${{ matrix.os }}
    needs: build-protoc-plugin
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: hecrj/setup-rust-action@v2
    - uses: taiki-e/install-action@v2
      with:
        tool: protoc@3.31.1
    - name: Restore protoc plugin from cache
      id: cache-plugin
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/protoc-plugin
        key: ${{ runner.os }}-protoc-plugin-${{ hashFiles('protoc-gen-rust-grpc/src/**', 'protoc-gen-rust-grpc/.bazelrc', 'protoc-gen-rust-grpc/MODULE.bazel') }}
    - name: Add protoc plugin to PATH
      shell: bash
      run: |
        echo "${{ runner.temp }}/protoc-plugin" >> $GITHUB_PATH
    - uses: Swatinem/rust-cache@v2
    - name: Run interop tests
      run: ./interop/test.sh
      shell: bash
    - name: Run interop tests with Rustls
      run: ./interop/test.sh --use_tls tls_rustls
      shell: bash

  semver:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: obi1kenobi/cargo-semver-checks-action@v2
      with:
        feature-group: all-features

  external-types:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2025-08-06
    - name: Install cargo-check-external-types
      uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: cargo-check-external-types@0.3.0
    - uses: taiki-e/install-action@cargo-hack
    - uses: Swatinem/rust-cache@v2
    - run: cargo hack --no-private check-external-types --all-features
      env:
        RUSTFLAGS: "-D warnings"
